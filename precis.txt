  1.
=====




  2.
=====

- Пакет к изучению - sqlx. Удобно расширяет стандартный пакет sql.
- GORM - лучше не использовать, падает производительность. Мы приходим в go за производительностью.
- Почитать database/sql tutorial.


Golang-migrations:
    - Install CLI extension goland-migrations (Use Homebrew for install on Mac)

    - Create migration:
        $ migrate create -ext sql -dir migrations create_users

    - Описываем миграцию на sql

    - Запускаем миграцию:
        $ migrate -path migrations -database "postgres://postgres:2222@localhost:54321/rest_api?sslmode=disable" up


Add Models:
    - Создаём директорию:
         internal/app/model

    - Создаём модель (структуру) user:
        internal/app/model/user.go

    - Создаём userrepository:
        internal/app/store/userrepository.go


Создаём тестовую БД (для проверки запросов во время тестов)
    - Создаём файл internal/app/store/testing
    - Создаём файл internal/app/store/store_test
    - Создаём базу данных test_rest_api

    Запускаем имеющиеся миграции:
        $ migrate -path migrations -database "postgres://postgres:2222@localhost:54321/test_rest_api?sslmode=disable" up


Создаём тесты для UserRespository
    - Создаём файл internal/app/store/userrepository_test




  3.
=====

Хэширование пароля пользователя
    - Устанавливаем пакет x/cripto
        $ go get golang.org/x/crypto


Тестируем модель User
    - Создаём хэлпер для тестов (пакет model):
        internal/app/model/testing

    - Создаём файл с тестами (пакет model_test):
        internal/app/model/user_test ()


Валидация данных.
    - Загружаем пакет ozzo-validation:
        $ go get github.com/go-ozzo/ozzo-validation/is

    - Пишем табличные кейсы на валидацию пользователя
        model/user_test TestUser_Validate()

     - Создаём кастомный валидатор:
        internal/app/model/validations.go


  4.
=====

Рефакторинг
































